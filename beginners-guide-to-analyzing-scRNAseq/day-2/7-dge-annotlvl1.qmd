---
title: "7 - Differential Gene Expression & Level 1 annotation"
author: "CDN team"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format:
  html:
    toc: true
    toc_float: true
    toc-location: left
    toc-depth: 4
    html-math-method: katex
    embed-resources: true
    self-contained-math: true
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, out.width = "100%", fig.align='center', 
                      message = FALSE, warning = FALSE, cache = FALSE)
options(width = 1200)
```

## Introduction

In this notebook we are going to look at how to interpret and visualize gene-level statistics obtained from differential expression analysis. We are not going to go into which method should be used to carry out differential gene expression analysis but we highly recommend giving a read to [A comparison of marker gene selection methods for single-cell RNA sequencing data](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-024-03183-0) by Jeffrey M. Pullin & Davis J. McCarthy if you're interested in digging deeper!

Some other interesting papers and twitter discussions can be found here:

-   Why Seurat and Scanpy's log fold change calculations are discordant - <https://twitter.com/lpachter/status/1694387749967847874?s=46>.

-   Discrepancies between Seurat and Scanpy's logFC - <https://twitter.com/slavov_n/status/1582347828818456576>

-   Differences in wilcoxon rank sum test p-value calculations between Seurat and Scanpy - <https://twitter.com/Sanbomics/status/1693995213298266515>

-   [A comparison of marker gene selection methods for single-cell RNA sequencing data](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-024-03183-0) - "*Overall, our results suggest that methods based on logistic regression, Student's t-test and the Wilcoxon rank-sum test all have strong performance.*"

-   [Do you really understand log2Fold change in single-cell RNAseq data?](https://divingintogeneticsandgenomics.com/post/do-you-really-understand-log2fold-change-in-single-cell-rnaseq-data/)

**Key Takeaways**

-   To annotate our clusters we need to determine which genes are differentially expressed in each one.

-   We can quantify these differentially expressed genes using effect size and discriminatory power metrics such as log2FC and AUC.

-   Differential gene expression metrics vary depending on the groups of cells we are comparing.

-   P values obtained from carrying out DGE analysis between clusters are inflated and should not be used.

## Libraries

```{r message=FALSE, warning=FALSE}
### Make sure all the packages are installed
if (!requireNamespace("Seurat", quietly = TRUE))
    install.packages("Seurat")

if (!requireNamespace("tidyverse", quietly = TRUE))
    install.packages("tidyverse")

if (!requireNamespace("colorBlindness", quietly = TRUE))
    install.packages("colorBlindness")

if (!requireNamespace("RColorBrewer", quietly = TRUE))
    install.packages("RColorBrewer")

if (!requireNamespace("DT", quietly = TRUE))
    install.packages("DT")

if (!requireNamespace("presto", quietly = TRUE))
    devtools::install_github("immunogenomics/presto")


### Load all the necessary libraries
library(Seurat)
library(tidyverse)
library(colorBlindness)
library(RColorBrewer)
library(DT)
```

## Load data

We're going to be working with a dataset from the paper - [Immunophenotyping of COVID-19 and influenza highlights the role of type I interferons in development of severe COVID-19](https://doi.org/10.1126/sciimmunol.abd1554) Download data from [cellxgene](https://cellxgene.cziscience.com/collections/4f889ffc-d4bc-4748-905b-8eb9db47a2ed) portal.

```{r message=FALSE, warning=FALSE, output=FALSE}
# Download the data in data/ directory
# download.file(
#     url = "https://datasets.cellxgene.cziscience.com/d8e35450-de43-451a-9979-276eac688bce.rds",
#     destfile = "../data/workshop-data.rds",
#     method = "wget",
#     extra = "-r -p --random-wait")
# We can also use the CLI with the wget command below
# wget https://datasets.cellxgene.cziscience.com/d8e35450-de43-451a-9979-276eac688bce.rds

se <- readRDS("../data/d8e35450-de43-451a-9979-276eac688bce.rds")
```

Generate a color palette for our cell types

```{r}
# https://www.datanovia.com/en/blog/easy-way-to-expand-color-palettes-in-r/
# nb.cols <- length(unique(se$Celltype))
# mycolors <- colorRampPalette(paletteMartin)(nb.cols)
pal <- paletteMartin
names(pal) <- sort(unique(se$Celltype))
```

## Analysis

### Convert ENSEMBL IDs to Gene Symbols

Right away we can see how ensembl ids are used in the rownames. Let's transform them into their matched symbols to make them human-readable:

```{r}
head(rownames(se))
```

Convert to gene symbols

```{r}
gene_df <- readr::read_csv(file = "../data/cov_flu_gene_names_table.csv")

symbol_id <- data.frame(index = rownames(se)) %>%
    left_join(gene_df, by = "index") %>%
    pull(feature_name)

# re-create seurat object
mtx <- se@assays$RNA$data
rownames(mtx) <- symbol_id
se <- CreateSeuratObject(counts = mtx, meta.data = se@meta.data)
rm(mtx); gc()
```

### Quick processing

```{r}
se <- se %>%
    NormalizeData(verbose = FALSE) %>%
    FindVariableFeatures(
        method = "vst",
        nfeatures = 3000,
        verbose = FALSE) %>%
    ScaleData(verbose = FALSE, features = VariableFeatures(.)) %>%
    RunPCA(verbose = FALSE)

ElbowPlot(se, ndims = 50)
```

Let's run `FindNeighbors` and `FindClusters` to label our data:
```{r}
se <- FindNeighbors(se, reduction = "pca") %>% 
    FindClusters(resolution = c(0.01, 0.05, 0.1, 0.25))
```

Let's compute the UMAP
```{r}
se <- se %>%
    RunUMAP(dims = 1:30, verbose = FALSE)
```

We can now take a look on the UMAP space how the clusters look
```{r fig.width=12, fig.height=10}
se$sample_id <- se$`Sample ID`
DimPlot(
    se,
    group.by = c(
        "RNA_snn_res.0.01", "RNA_snn_res.0.05",
        "RNA_snn_res.0.1", "RNA_snn_res.0.25"),
    label = TRUE)

dim_plt <- DimPlot(
    se,
    group.by = c("RNA_snn_res.0.05"),
    label = TRUE)
```

And the original cell type labels + the sample IDs
```{r fig.width=12, fig.height=5}
DimPlot(
    se,
    group.by = c("Celltype", "sample_id"),
    label = FALSE)
```


For the purpose of this tutorial we're going to go forward with resolution 0.05!

### DGE Wilcoxon

The different implementations Seurat incorporates provides in `FindAllMarkers` compare the gene expression between 2 groups of cells. This one vs all strategy is very quick and returns the `avg_log2FC`. This `avg_log2FC` is computed as detailed [here](https://github.com/satijalab/seurat/issues/741) & [here](https://github.com/satijalab/seurat/issues/467). Since we're working with normalized data the log2FC can be directly computed by subtracting the average expression between both groups - $log(\frac{exp1}{exp2})=log(exp1)-log(exp2)$

```{r}
Idents(se) <- "RNA_snn_res.0.05"
mgs <- FindAllMarkers(
    se,
    test.use = "wilcox",
    slot = "data",
    only.pos = TRUE,
    logfc.threshold = 0.5,
    min.pct = 0.25)
```

Look at the results in a dynamic table:
```{r}
DT::datatable(mgs, filter = "top")
```

Look at the results in a heatmap
```{r fig.width=15, fig.height=15}
top10 <- mgs %>%
    group_by(cluster) %>%
    dplyr::filter(avg_log2FC > 1) %>%
    slice_head(n = 10) %>%
    ungroup()

DoHeatmap(se, features = top10$gene) + NoLegend()
```

### Annotation

#### Cluster 0 & 4

Let's look at genes that are differentially expressed
```{r fig.height=12, fig.width=15}
FeaturePlot(
    se,
    features = c("CD3D", "CD3D", "TRAC", "TRBC2", "CD8B", "CD4")) +
    dim_plt

VlnPlot(
    se,
    features = c("CD3D", "CD3D", "TRAC", "TRBC2", "CD8B", "CD4"),
    group.by = "RNA_snn_res.0.05") +
    dim_plt
```

Clusters 0 & 4 seem to have a lot of expression of T cell related genes so at this level 1 we are going to label them as T cells.

#### Cluster 1
Let's look at genes that are differentially expressed
```{r fig.height=12, fig.width=15}
FeaturePlot(
    se,
    features = c("CD14", "S100A8", "VCAN", "LYZ", "MS4A6A")) +
    dim_plt

VlnPlot(
    se,
    features = c("CD14", "S100A8", "VCAN", "LYZ", "MS4A6A"),
    group.by = "RNA_snn_res.0.05") +
    dim_plt
```

Cluster 1 is expressing a lot of monocyte-like genes, at this level 1 we are going to label them as monocytes.

#### Cluster 2
Let's look at genes that are differentially expressed
```{r fig.height=12, fig.width=15}
FeaturePlot(
    se,
    features = c("MS4A1", "CD79A", "CD79B", "IGHD", "IGHM")) +
    dim_plt

VlnPlot(
    se,
    features = c("MS4A1", "CD79A", "CD79B", "IGHD", "IGHM"),
    group.by = "RNA_snn_res.0.05") +
    dim_plt
```

Cluster 2 is expressing B cells genes

#### Cluster 3

Let's look at genes that are differentially expressed
```{r fig.height=12, fig.width=15}
FeaturePlot(
    se,
    features = c("PF4", "GP9", "PPBP")) +
    dim_plt

VlnPlot(
    se,
    features = c("PF4", "GP9", "PPBP"),
    group.by = "RNA_snn_res.0.05") +
    dim_plt
```

Cluster 3 is expressing platelet genes

#### Cluster 5

Let's look at genes that are differentially expressed
```{r fig.height=12, fig.width=12}
FeaturePlot(
    se,
    features = c("HBA1", "HBA2", "HBB", "HBD")) +
    dim_plt

VlnPlot(
    se,
    features = c("HBA1", "HBA2", "HBB", "HBD"),
    group.by = "RNA_snn_res.0.05") +
    dim_plt
```

Cluster 5 is expressing hemoglobin genes so they are likely RBC

#### Cluster 6

Let's look at genes that are differentially expressed
```{r fig.height=12, fig.width=12}
FeaturePlot(
    se,
    features = c("SHD", "SHC", "LILRA4", "CLEC4C", "IL3RA", "IRF4")) +
    dim_plt

VlnPlot(
    se,
    features = c("HBA1", "HBA2", "HBB", "HBD"),
    group.by = "RNA_snn_res.0.05") +
    dim_plt
```

Cluster 6 is expressing genes predominantly expressed by pDCs.



## Annotate
According to the markers observed we can make a first general annotation
```{r}
se@meta.data <- se@meta.data %>%
  dplyr::mutate(
    annotation_lvl1 = dplyr::case_when(
      RNA_snn_res.0.05 == 0 ~ "T cells",
      RNA_snn_res.0.05 == 1 ~ "Monocytes", #
      RNA_snn_res.0.05 == 2 ~ "B cells",
      RNA_snn_res.0.05 == 3 ~ "Platelets",
      RNA_snn_res.0.05 == 4 ~ "T cells", # 
      RNA_snn_res.0.05 == 5 ~ "RBC",
      RNA_snn_res.0.05 == 6 ~ "pDCs")
  )

DimPlot(se, group.by = "annotation_lvl1")
```
### DotPlot summary

```{r}
order <- c("T cells", "Monocytes", "B cells", "Platelets", "RBC", "pDCs")

se$annotation_lvl1_ord <- factor(
  x = se$annotation_lvl1,
  levels = order)

## Genes for DOTPLOT
dplot_genes <- c(
    # T cell genes
    "CD3D", "CD3E", "TRAC", "TRBC2", "CD8B", "CD4",
    # Monocytes
    "CD14", "S100A8", "VCAN", "LYZ", "MS4A6A",
    # B cells
    "MS4A1", "CD79A", "CD79B", "IGHD", "IGHM",
    # Platelets
    "PF4", "GP9", "PPBP",
    # RBS
    "HBA1", "HBA2", "HBB", "HBD",
    #pDCs
    "LILRA4", "CLEC4C", "IL3RA", "IRF4"
  )

Seurat::DotPlot(
  object = se,
  features = dplot_genes,
  group.by = "annotation_lvl1_ord",
  col.min = 0,
  dot.min = 0) +
  ggplot2::scale_x_discrete(
    breaks = dplot_genes) +
  ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 60, hjust = 1)) +
  ggplot2::labs(x = "", y = "")
```

## Extra
See below how the `avg_log2FC` calculation is done! Code extracted from [Seurat's codebase](https://github.com/satijalab/seurat/blob/41d19a8a55350bff444340d6ae7d7e03417d4173/R/differential_expression.R#L1114-L1117).

```{r, eval=FALSE}
features <- rownames(se) == "MS4A1"
cells.1 <- se$Celltype == "B cell, IgG+"
cells.2 <- se$Celltype != "B cell, IgG+"
data.use <- GetAssayData(object = se, assay.type = "RNA", slot = "data")
pseudocount.use <- 1
base <- 2

# Calculate fold change
mean.fxn <- function(x) {
    return(log(x = (rowSums(x = expm1(x = x)) + pseudocount.use)/NCOL(x), base = base))
  }

data.1 <- mean.fxn(data.use[features, cells.1, drop = FALSE])
data.2 <- mean.fxn(data.use[features, cells.2, drop = FALSE])

# Look at log2FC
(fc <- (data.1 - data.2))
```

Check if its equal to the `avg_log2FC` obtained from `FindAllMarkers`:

```{r eval=FALSE}
fc == mgs[mgs$cluster == "B cell, IgG+" & mgs$gene == "MS4A1", "avg_log2FC"]
```

##### Looking into the P-values

More details can be obtained in [OSCA](https://bioconductor.org/books/3.17/OSCA.advanced/marker-detection-redux.html#p-value-invalidity).

P values obtained from DGE analysis are inflated and, therefore invalid in their interpretation. We can't use p-values to reject the Null Hypothesis since we are carrying out **data snooping**. This means that we are dividing the clusters based on their gene expression, and then computing p-values from the genes that are differentially expressed, even though we already know these genes are differentially expressed since we clustered the data based on them being different.

A way to show this is by looking at how skewed the distributions of the p-values obtained is:

```{r fig.width=9, fig.width=9, eval=FALSE}
# Compute the p-values without he thresholds
mgs2 <- FindAllMarkers(
    se,
    test.use = "wilcox",
    only.pos = TRUE,
    logfc.threshold = 0,
    min.pct = 0,
    return.thresh = 1,
    max.cells.per.ident = 100 # use 100 cells per cell type for speed
    )

ggplot(mgs2, aes(x = p_val, fill = cluster, color = cluster)) +
    # geom_histogram(alpha = 0.3, position = "identity") +
    geom_density(alpha = 0.3) +
    theme_minimal()

ggplot(mgs2, aes(x = p_val, fill = cluster, color = cluster)) +
    geom_histogram(alpha = 0.3, position = "identity") +
    facet_wrap(~cluster, scales = "free") +
    theme_minimal()
```

## Session Info

```{r}
sessionInfo()
```
