---
title: "6 - Clustering"
format: html
editor: visual
author: Rose Hedderman
---

# Clustering

## Load Libraries and Data


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

Libraries
```{r}
if (!requireNamespace("tidyverse", quietly = TRUE))
    install.packages('tidyverse')
if (!requireNamespace("Seurat", quietly = TRUE))
    install.packages('Seurat')
if (!requireNamespace("colorBlindness", quietly = TRUE))
    install.packages('colorBlindness')
if (!requireNamespace("RColorBrewer", quietly = TRUE))
    install.packages('RColorBrewer')
if (!requireNamespace("cluster", quietly = TRUE))
    install.packages('cluster')
```

```{r}
suppressPackageStartupMessages({
  library(dplyr)
  library(Seurat)
  library(tidyverse)
  library(RColorBrewer)
  library(colorBlindness)
  library(DoubletFinder)
  library(cluster)
})
set.seed(687)

# Set color palette
pal <- paletteMartin
names(pal) <- sort(unique(se$Celltype))
```

Load Data
```{r}
# Load the Seurat object with doublet and batch information
se <- readRDS('../data/workshop-data-withDFinfo.rds')
se 

# # Load a provided gene conversion table to convert ENSG to readable gene symbols
# genes <- read_csv('../data/cov_flu_gene_names_table.csv') 
# 
# # Remake Seurat object
# mtx <- se@assays$RNA@data
# rownames(mtx) <- genes[match(row.names(mtx),genes$index), ]$feature_name
# 
# se <- CreateSeuratObject(counts = mtx, meta.data = se@meta.data)
# 
# se
# rm(mtx)
```
## Preprocessing

```{r}
# se <- se %>%
#     NormalizeData(verbose = FALSE) %>%
#     FindVariableFeatures(
#         method = "vst",
#         nfeatures = 3000,
#         verbose = FALSE) %>%
#     ScaleData(verbose = FALSE) %>%
#     RunPCA(verbose = FALSE) %>%
#     FindNeighbors %>%
#     FindClusters(resolution = 0.5) %>%
#     RunUMAP(dims = 1:30, verbose = FALSE, n.components=3L)

ElbowPlot(se, ndims = 50)
```

### UMAP of Counts and QC Metrics

```{r}
library(ggplot2)

# Convert the 'batch' variable to a character
se@meta.data$batch <- as.character(se@meta.data$batch)
d1 <- DimPlot(se,
        reduction='umap',
        group.by='batch')

d2 <- DimPlot(se,
        reduction='umap',
        group.by='DF_class')

d3 <- DimPlot(se,
        reduction='umap',
        group.by='Sample ID')

d4 <- DimPlot(se,
        reduction='umap',
        group.by='Celltype')

d1 | d2
d3 | d4
```

## Clustering

### Look at different resolutions

### QC based on 2 resolutions to make a decision

### Annotate Seurat object with chosen resolution & DEGs


## Cluster Metrics

### Cluster Diversity
1 - Number of Cells in each Cluster

2 - Which samples are in each cluster

3 - Stacked Bar Plot of Cluster Diversity

### Silhouette Analysis
As covered in the last workshop, silhouette analysis is a way to measure how similar an object is to its own cluster compared to other clusters. The silhouette value ranges from -1 to 1, where a high value indicates that the object is well matched to its own cluster and poorly matched to neighboring clusters.

```{r}
seurat_clusters <- se@meta.data$seurat_clusters
pca_embeddings <- Embeddings(se, reduction = 'pca')

# Calculate silhouette widths
sil_scores <- silhouette(x = as.numeric(seurat_clusters), dist = dist(pca_embeddings))

# Extract silhouette scores
silhouette_data <- as.data.frame(sil_scores)
# Recover cell type names
silhouette_data$seurat_clusters <- as.character(seurat_clusters)

row.names(silhouette_data) <- row.names(pca_embeddings)

silhouette_arranged <- silhouette_data %>% 
  group_by(seurat_clusters) %>% 
  arrange(-sil_width)
```

```{r}
overall_average <- silhouette_arranged %>% 
  ungroup %>% 
  summarize(ave = as.numeric(mean(sil_width))) %>% 
  pull(ave)

full_plot <- ggplot(silhouette_arranged, 
                    aes(x = sil_width, 
                        y = seurat_clusters, 
                        fill = seurat_clusters, 
                        group = seurat_clusters)) +
    geom_bar(stat = "identity", position = 'dodge2') +
    geom_vline(xintercept = overall_average,
               color = 'red',
               linetype = 'longdash') +
    theme_minimal() +
    labs(title = "Silhouette Analysis",
        y = "Cluster",
        x = "Silhouette width",
        fill = "Cluster") +
    theme(axis.text.y = element_text(hjust = 1, vjust = 0.5, size = 20),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        axis.title.y = element_text(size = 20),
        legend.position = "None")

full_plot
```

Look at silhouette scores on a UMAP
```{r}
se$CellID <- row.names(se@meta.data)

sil_ids <- silhouette_data %>% rownames_to_column('CellID') %>% left_join(se@meta.data)

se <- AddMetaData(se, sil_ids)

FeaturePlot(se, feature = "sil_width") + ggtitle('Silhouette width') + scale_color_viridis_c(limits = c(-1,1), option = "magma") | d5
```

## Session Info

```{r}
sessionInfo()
```
