---
title: "6 - Cell-Cell Communication analysis"
author: "CDN team"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format:
  html:
    toc: true
    toc_float: true
    toc-location: left
    toc-depth: 4
    embed-resources: true
    self-contained-math: true
editor_options: 
  chunk_output_type: inline
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, out.width = "100%", fig.align='center', 
                      message = FALSE, warning = FALSE, cache = FALSE)
```

## Introduction

In this notebooks we are going to carry out a cell-cell communication analysis using [`CellChat`](https://www.nature.com/articles/s41467-021-21246-9). You can see the GitHub repository [here](https://github.com/jinworks/CellChat), the CellChat vignette [here](https://htmlpreview.github.io/?https://github.com/jinworks/CellChat/blob/master/tutorial/CellChat-vignette.html) and the differential communication analysis vignette [here](https://htmlpreview.github.io/?https://github.com/jinworks/CellChat/blob/master/tutorial/Comparison_analysis_of_multiple_datasets.html). The goal of the notebook is to identify which communication pathways are altered between flu and covid infection!

Some associated literature which is a must read are:

-   [Comparison of methods and resources for cell-cell communication inference from single-cell RNA-Seq data](https://www.nature.com/articles/s41467-022-30755-0)

-   [Evaluation of cell-cell interaction methods by integrating single-cell RNA sequencing data with spatial information](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-022-02783-y)

**Key Takeaways**

-   The Ligand-Receptor (L-R) database used gather the collective prior knowledge and has a great impact on the results obtained.

-   Different CCC tools have varying assumptions, therefore, the tool of choise will also have a major impact on the results.

    -   `CellChat` and `CellPhoneDB` make a point of modelling CCC events taking into account heteromeric complexes. This ensures all the subunits of a protein complex are expressed to consider a cell-cell interaction feasible. This assumption reduces false positive predictions.

    -   `CellChat`, additionally, accounts for interaction mediator proteins such as agonists.

-   Broadly, CCC tools are generally able to capture relevant biological signals. However, predicted interactions tend to have false positives, if available leveraging information from additional modalities and analyses could help to refine the predictions.

-   CCC inference from scRNAseq data makes the assumption that gene expression is a proxy for protein levels. Moreover, they don't (and can't) account for other intermediate steps between translation and protein function such as post-translational modifications, secretion, diffusion...

## Library

```{r}
options(future.globals.maxSize= 891289600)
### Make sure all the packages are installed
if (!requireNamespace("Seurat", quietly = TRUE))
    install.packages("Seurat")

if (!requireNamespace("dplyr", quietly = TRUE))
    install.packages("dplyr")

if (!requireNamespace("devtools", quietly = TRUE))
    install.packages("devtools")
devtools::install_github("jinworks/CellChat")

if (!requireNamespace("ComplexHeatmap", quietly = TRUE))
    BiocManager::install("ComplexHeatmap")

### Load all the necessary libraries
library(Seurat)
library(dplyr)
library(CellChat)
library(ComplexHeatmap)
```

## Load data

We're going to be working with a dataset from the paper - [Immunophenotyping of COVID-19 and influenza highlights the role of type I interferons in development of severe COVID-19](https://doi.org/10.1126/sciimmunol.abd1554) Download data from [cellxgene](https://cellxgene.cziscience.com/collections/4f889ffc-d4bc-4748-905b-8eb9db47a2ed) portal.

```{r message=FALSE, warning=FALSE, output=FALSE}
# Download the data in data/ directory
# download.file(
#     url = "https://datasets.cellxgene.cziscience.com/d8e35450-de43-451a-9979-276eac688bce.rds",
#     destfile = "../data/workshop-data.rds",
#     method = "wget",
#     extra = "-r -p --random-wait")
# We can also use the CLI with the wget command below
# wget https://datasets.cellxgene.cziscience.com/d8e35450-de43-451a-9979-276eac688bce.rds

se <- readRDS("../data/workshop-data.rds")
```

## Analysis

### Convert ENSEMBL IDs to Gene Symbols

Right away we can see how ensembl ids are used in the rownames. Let's transform them into their matched symbols to make them human-readable:

```{r}
head(rownames(se))
```

Convert to gene symbols

```{r}
gene_df <- readr::read_csv(file = "../data/cov_flu_gene_names_table.csv")

symbol_id <- data.frame(index = rownames(se)) %>%
    left_join(gene_df) %>%
    pull(feature_name)

# re-create seurat object
mtx <- se@assays$RNA@data
rownames(mtx) <- symbol_id
se <- CreateSeuratObject(counts = mtx, meta.data = se@meta.data)
```

```{r}
# symbol_id <- mapIds(
#     org.Hs.eg.db,
#     keys = rownames(se), 
#     column = "SYMBOL",
#     keytype = "ENSEMBL",
#     multiVals = "first")
# 
# # df <- data.frame(symbol = symbol_id, ensembl = names(symbol_id))
# all(rownames(se) == names(symbol_id))
# 
# # re-create seurat object
# mtx <- se@assays$RNA@data
# rownames(mtx) <- symbol_id
# 
# # Remove NAs
# sum(is.na(rownames(mtx)))
# dim(mtx)
# mtx <- mtx[!is.na(rownames(mtx)), ]
# dim(mtx)
# 
# rownames(mtx) <- make.unique(rownames(mtx))
# se <- CreateSeuratObject(counts = mtx, meta.data = se@meta.data)
# 
# sum(is.na(rownames(se)))
```

### Split dataset

```{r}
# First we will remove the Uncategorized1/2 populations as we have seen that they are doublets
se <- se[, ! se$Celltype %in% c("Uncategorized1", "Uncategorized2")]

# Create samples so the CellChat knows which cells come from each sample
se$samples <- se$`Sample ID`
# Convert to character to drop inexisting factors
se$Celltype <- factor(as.character(se$Celltype))
```

```{r}
# Subset to cells coming form COVID-19 patients
covid <- se[, se$disease == "COVID-19"]

# Subset to cells coming form flu patients
flu <- se[, se$disease == "influenza"]
```

Let's visualize the cell type populations between these 2 datasets:

```{r fig.width=9, fig.height=3}
bind_rows(
    data.frame(prop.table(table(covid$Celltype)), disease = "covid"),
    data.frame(prop.table(table(flu$Celltype)), disease = "flu")) %>%
    ggplot(aes(x = Var1, y = disease, fill = Freq, label = round(Freq, 2))) +
    geom_tile(color = "lightgrey") +
    geom_text(color = "lightgrey") +
    scale_fill_viridis_c(option = "magma") +
    labs(title = "Cell type proportions", x = "", y = "") +
    theme_classic() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
```

Carry out pre-processing steps on covid data and create the cellchat object

```{r}
# Normalize data
covid <- NormalizeData(covid, verbose = FALSE)

cc_covid <- createCellChat(
    object = covid,
    group.by = "Celltype",
    assay = "RNA",
    do.sparse = TRUE)
```

Same for the flu

```{r}
# Normalize data
flu <- NormalizeData(flu, verbose = FALSE)

cc_flu <- createCellChat(
    object = flu,
    group.by = "Celltype",
    assay = "RNA",
    do.sparse = TRUE)
```

### CellChat CCC analysis

#### Cellchat intuition

How is the communication probability computed? See the methods section in the [CellChat paper](https://www.nature.com/articles/s41467-021-21246-9#Sec12).

The communication probability *P*~i,j~ from cell groups *i* to *j* for a particular ligand-receptor pair *k* was modeled by

$$
P_{i,j}^k =     \frac{{L_iR_j}}{{K_h + L_iR_j}} \times \left( {1 + \frac{{AG_i}}{{K_h + AG_i}}} \right) \cdot \left( {1 + \frac{{AG_j}}{{K_h + AG_j}}} \right) \\    \times \frac{{K_h}}{{K_h + AN_i}} \cdot \frac{{K_h}}{{K_h + AN_j}} \times \frac{{n_in_j}}{{n^2}}
$$

$$
{L_i = \root {{m1}} \of {{L_{i,1} \cdots L_{i,m1}}},\,R_j = \root {{m2}} \of {{R_{j,1} \cdots R_{j,m2}}} \cdot \frac{{1 + RA_j}}{{1 + RI_j}}}
$$

-   *L~i~* and *R~j~* represent the expression level of ligand *L* and receptor *R* in cell group *i* and cell group *j*, respectively

-   *K~h~* whose default value was set to be 0.5

-   AG is the average expression of the L-R agonists

#### CellChat Database

Define the use of the human L-R database. The database used is a key decision in the analysis workflow since it will define the universe of Ligand-Receptor interactions we are going to be looking for. We want it to be as comprehensive as possible while simultaneously only including curated communication partners.

We personally like the CellChatDB database because:

-   Groups LR interactions into functional pathways.

-   Takes into account multimeric complexes as well as other cofactors, such as agonists and antagonists present in the dataset.

-   LR interactions come from KEGG Pathway database and manually curated from primary references.

We can take a glimpse at all of this information by looking at the database loaded into R!

```{r}
CellChatDB <- CellChatDB.human
showDatabaseCategory(CellChatDB)
# glimpse(CellChatDB)
```

```{r}
CellChatDB$interaction %>%
    dplyr::select(interaction_name, pathway_name, ligand, receptor, agonist, evidence, annotation) %>% 
    head() %>%
    as_tibble()

CellChatDB$interaction %>%
    dplyr::select(interaction_name, pathway_name, ligand, receptor, agonist, evidence, annotation) %>% 
    tail() %>%
    as_tibble()
```

#### Preprocess expression data

To infer the cell state-specific communications, CellChat identifies over-expressed ligands or receptors in one cell group and then identifies over-expressed ligand-receptor interactions if either ligand or receptor are over-expressed.

```{r}
# subset the expression data of signaling genes for saving computation cost
cc_covid@DB <- CellChatDB
cc_covid <- subsetData(cc_covid) # This step is necessary even if using the whole database
future::plan("multisession", workers = 4) # do parallel
cc_covid <- identifyOverExpressedGenes(cc_covid)
cc_covid <- identifyOverExpressedInteractions(cc_covid)
# The number of highly variable ligand-receptor pairs used for signaling inference is 2212 
```

Same for the flu

```{r}
# subset the expression data of signaling genes for saving computation cost
cc_flu@DB <- CellChatDB
cc_flu <- subsetData(cc_flu) # This step is necessary even if using the whole database
future::plan("multisession", workers = 4) # do parallel
cc_flu <- identifyOverExpressedGenes(cc_flu)
cc_flu <- identifyOverExpressedInteractions(cc_flu)
# The number of highly variable ligand-receptor pairs used for signaling inference is 1728 
```

#### Inference of cell-cell communication network

From the CellChat [vignette](https://htmlpreview.github.io/?https://github.com/jinworks/CellChat/blob/master/tutorial/CellChat-vignette.html#preprocessing-the-expression-data-for-cell-cell-communication-analysis): *CellChat infers the biologically significant cell-cell communication by assigning each interaction with a probability value and peforming a permutation test. CellChat models the probability of cell-cell communication by integrating gene expression with prior known knowledge of the interactions between signaling ligands, receptors and their cofactors using the law of mass action.*

*The number of inferred ligand-receptor pairs clearly depends on the method for calculating the average gene expression per cell group. `trimean` approximates 25% truncated mean, implying that the average gene expression is zero if the percent of expressed cells in one group is less than 25%.*

By setting this stringent parameters we ensure we are capturing robust signal and removing spurious cell-cell communication.

```{r}
cc_covid <- computeCommunProb(cc_covid, type = "triMean")
cc_flu <- computeCommunProb(cc_flu, type = "triMean")

# If we wanted to be more lax we could use truncatedMean
# By setting trim - 0.1 we are only removing the top and bottom 10% expressing cells for that gene
# cc_covid <- computeCommunProb(cc_covid, type = "truncatedMean", trim = 0.1)
# cc_flu <- computeCommunProb(cc_flu, type = "truncatedMean", trim = 0.1)
```

#### Summarize CCC to a signaling pathway level

We can summarize the individual ligand-receptor interactions into pathways for a broader and more functional look at the data.

```{r}
cc_covid <- computeCommunProbPathway(cc_covid)
cc_flu <- computeCommunProbPathway(cc_flu)

## Look at all the pathways availavle
cc_covid@netP$pathways
```

Calculate the aggregated cell-cell communication network by counting the number of links or summarizing the communication probability.

```{r}
cc_covid <- aggregateNet(cc_covid)
cc_flu <- aggregateNet(cc_flu)
```

Lastly we can compute the network centrality scores of the cell types which we can use to identify key senders, receivers, mediators...

```{r}
# the slot 'netP' means the inferred intercellular communication network of signaling pathways
cc_covid <- netAnalysis_computeCentrality(cc_covid, slot.name = "netP") 
cc_flu <- netAnalysis_computeCentrality(cc_flu, slot.name = "netP") 
```

#### Visualize inferred IFN-II signaling network

With Heatmap

```{r fig.width=8,fig.height=4}
object.list <- list(covid = cc_covid, flu = cc_flu)

par(mfrow = c(1, 2))
plt_ls <- lapply(seq_len(length(object.list)), function(i) {
  netVisual_heatmap(
    object.list[[i]],
    signaling = "IFN-II",
    color.heatmap = "Reds",
    title.name = glue::glue("IFN-II signaling network - {names(object.list)[i]}"))
})

draw(plt_ls[[1]] + plt_ls[[2]], ht_gap = unit(.5, "cm"))

```

#### Merge Covid and Flue objects

Now we can merge the `CellChat` objects and work with them together. The rest of the analysis follows the comparison [vignette](https://htmlpreview.github.io/?https://github.com/jinworks/CellChat/blob/master/tutorial/Comparison_analysis_of_multiple_datasets.html#create-a-directory-to-save-figures).

```{r}
cellchat <- mergeCellChat(object.list, add.names = names(object.list), cell.prefix = TRUE)
```

Save objects in case we need them for later use

```{r}
saveRDS(object.list, file = "../data/cellchat_ls.rds")
# object.list <- readRDS(file = "../data/cellchat_ls.rds")
# rm(object.list); gc()
```

### Differential interaction analysis

Let's start by comparing the the total number of interactions and the sum of the weights

```{r}
gg1 <- compareInteractions(
    cellchat,
    show.legend = FALSE,
    group = c(1,2))
gg2 <- compareInteractions(
    cellchat,
    show.legend = FALSE,
    group = c(1,2), 
    measure = "weight")
gg1 + gg2
```

With this plot we can visualize how the covid dataset has a slightly larger number of interactions but the interaction strength within the flu dataset are stronger/more likely.

We can also take a look at how these interactions are different between covid and flu. In the colorbar, red (or blue) represents increased (or decreased) signaling in the second dataset compared to the first one. In our case red is stronger in Flu and blue in covid

```{r fig.width=12, fig.height=6}
gg1 <- netVisual_heatmap(cellchat)
gg2 <- netVisual_heatmap(cellchat, measure = "weight")

gg1 + gg2
```

Next we can see how much the incoming and outgoing interaction signals are changing between conditions. This requires some data prep so we are showing the plot below:

```{r}
slot.name <- "netP"
x.measure <- "outdeg"
y.measure <- "indeg"
signaling <- NULL

df_ls <- lapply(names(object.list), function(nm) {
    object <- object.list[[nm]]
    centr <- slot(object, slot.name)$centr
    outgoing <- matrix(0, nrow = nlevels(object@idents), ncol = length(centr))
    incoming <- matrix(0, nrow = nlevels(object@idents), ncol = length(centr))
    dimnames(outgoing) <- list(levels(object@idents), names(centr))
    dimnames(incoming) <- dimnames(outgoing)
    for (i in 1:length(centr)) {
        outgoing[, i] <- centr[[i]][[x.measure]]
        incoming[, i] <- centr[[i]][[y.measure]]
    }
    outgoing.cells <- rowSums(outgoing)
    incoming.cells <- rowSums(incoming)
    num.link <- aggregateNet(object, signaling = signaling, return.object = FALSE, 
                             remove.isolate = FALSE)$count
    num.link <- rowSums(num.link) + colSums(num.link) - diag(num.link)
    df <- data.frame(
        outgoing.cells,
        incoming.cells, 
        names(incoming.cells),
        num.link,
        nm)
    colnames(df) <- c(paste0("outgoing_", nm), paste0("incoming_", nm), "labels", paste0("count_", nm))
    df$labels <- factor(df$labels, levels = names(incoming.cells))
    
    df
})
```

Visualize how the interactions changed

```{r fig.width=6, fig.height=6}
require(gridExtra)
library(colorBlindness)
library(RColorBrewer)
# Define the number of colors you want
nb.cols <- length(unique(se$Celltype))
col_pal <- colorRampPalette(brewer.pal(8, "Set2"))(nb.cols)
names(col_pal) <- sort(unique(se$Celltype))
# Create a ggplot with 18 colors 
df_ls[[1]] %>%
    left_join(df_ls[[2]], by = "labels") %>%
    
    ggplot() +
    geom_point(aes(x = outgoing_flu, y = incoming_flu, color = labels,
                   fill = "Flu", size = count_flu), alpha = 0.5) +
    geom_point(aes(x = outgoing_covid, y = incoming_covid, color = labels,
                   fill = "Covid", size = count_covid), size = 3, pch = 21) +
    geom_segment(aes(
        x = outgoing_covid,
        y = incoming_covid,
        xend = outgoing_flu,
        yend = incoming_flu,
        color = labels),
        arrow = arrow(angle = 40, length = grid::unit(.35, "cm")),
        show.legend = FALSE) +
    theme_classic() +
    guides(
        size = FALSE,
        shape = FALSE,
        colour = guide_legend(override.aes = list(size = 5))) +
    scale_color_manual(values = col_pal) +
    labs(
        title = "Cell-Cell interaction strength shifts from Covid to Flu",
       # x = "Outgoing strength",
      #  y = "Incoming strength",
      y = NULL, x = NULL,
        color = "Cell Type",
        fill = "Disease")  +
        scale_fill_manual(values = c("white", "black")) +
    theme(panel.grid.minor = element_blank(),
          panel.grid.major = element_line()) +
    scale_y_continuous(labels = function(x) {
        case_when(x == 25 ~ "25 Incoming\nStrength",
                  TRUE ~ as.character(round(x)))
    })  +
    scale_x_continuous(labels = function(x) {
        case_when(x == 10 ~ "10\nOutgoing\nStrength",
                  TRUE ~ as.character(round(x)))
    }) +
    coord_fixed()
```

In this case we can see how CD8 T cells greatly increase their incoming signal as well as intermediate monocytes. NKs and CD4 EM-like, in turn, greatly increase their outgoing signal while not increasing their incoming signal.

CellChat allows us to explore signalling changes at the pathway level within one specific population between both conditions. Positive values highlight increases in the second group (Flu) while negative values are increases in the first group (covid).

```{r}
netAnalysis_signalingChanges_scatter(cellchat, idents.use = "CD4, EM-like")
```

#### Differential pathway signalling

Look at broad changes in pathway signalling across the entire dataset

```{r fig.width=9, fig.height=9}
gg1 <- rankNet(cellchat, mode = "comparison", measure = "weight", sources.use = NULL, targets.use = NULL, stacked = T, do.stat = TRUE)
gg2 <- rankNet(cellchat, mode = "comparison", measure = "weight", sources.use = NULL, targets.use = NULL, stacked = F, do.stat = TRUE)

gg1 + gg2
```

#### Diving into a pathway

We also need to take a look at which are the LR interactions driving a pathway. We can easily look at this using the function XX

```{r fig.height=6, fig.width=9}
(netAnalysis_contribution(object.list[[1]], signaling = "MHC-II") +
    labs(title = "Contributions of each L-R pair in Covid")) / 
(netAnalysis_contribution(object.list[[2]], signaling = "MHC-II") +
    labs(title = "Contributions of each L-R pair in Flu"))

```

## Comparing all the pathways at once

Lastly, we can also take a look at all the pathway changes at once by cell type between both conditions.

```{r fig.width=8, fig.height=8}
library(ComplexHeatmap)

# combining all the identified signaling pathways from different datasets 
pathway.union <- union(object.list[["covid"]]@netP$pathways, object.list[["flu"]]@netP$pathways)
ht1 <- netAnalysis_signalingRole_heatmap(
    object.list[["covid"]],
    pattern = "outgoing",
    signaling = pathway.union,
    title = "covid",
    width = 5,
    height = 12)

ht2 <- netAnalysis_signalingRole_heatmap(
    object.list[["flu"]],
    pattern = "outgoing",
    signaling = pathway.union,
    title = "flu",
    width = 5,
    height = 12)

draw(ht1 + ht2, ht_gap = unit(.5, "cm"))
```

```{r fig.width=8, fig.height=8}
# combining all the identified signaling pathways from different datasets 
pathway.union <- union(object.list[["covid"]]@netP$pathways, object.list[["flu"]]@netP$pathways)
ht1 <- netAnalysis_signalingRole_heatmap(
    object.list[["covid"]],
    pattern = "incoming",
    signaling = pathway.union,
    title = "covid",
    width = 5,
    height = 12)

ht2 <- netAnalysis_signalingRole_heatmap(
    object.list[["flu"]],
    pattern = "incoming",
    signaling = pathway.union,
    title = "flu",
    width = 5,
    height = 12)

draw(ht1 + ht2, ht_gap = unit(.5, "cm"))
```

### Visualizing L-R interactions between cell types

```{r fig.width=8, fig.height=8}
levels(cellchat@idents$joint)
netVisual_bubble(
    cellchat,
    sources.use = "DC",
    targets.use = c("NK cell", "CD4, EM-like"),
    comparison = c(1, 2),
    angle.x = 45)
```

We can see here how the MHC-II signalling is present between DCs & CD4 and completely absent with NKs.

## Session Info

```{r}
sessionInfo()
```
