---
title: "5 - Pseudobulk Analysis"
author: "CDN team"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format:
  html:
    toc: true
    toc_float: true
    toc-location: left
    toc-depth: 4
    html-math-method: katex
    self-contained-math: true
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

## Introduction
In single cell RNA seq, there are many ways to manipulate the data retrieved from your samples. One popular way to get more out of that data is pseudobulk. *define pseudobulk*

### Useful Resources
- Paper 1
- Paper 2
- Paper 3 - or Bioinformatician videos

### Key Takeaways
- The 3 steps
- Next Steps

## Libraries

### Installation

```{r, eval=FALSE}
if (!requireNamespace("tidyverse", quietly = TRUE))
    install.packages('tidyverse')
if (!requireNamespace("Seurat", quietly = TRUE))
    install.packages('Seurat')
if (!requireNamespace("colorBlindness", quietly = TRUE))
    install.packages('colorBlindness')
if (!requireNamespace("RColorBrewer", quietly = TRUE))
    install.packages('RColorBrewer')
# Presto speeds up Wilcoxon tests for marker gene calculation in Seurat
if (!requireNamespace("presto", quietly = TRUE))
    devtools::install_github('immunogenomics/presto')
if (!requireNamespace("DESeq2", quietly = TRUE))
    BiocManager::install('DESeq2')
if (!requireNamespace("org.Hs.eg.db", quietly = TRUE))
    BiocManager::install('org.Hs.eg.db')
if (!requireNamespace("Matrix", quietly = TRUE))
    install.packages('Matrix')
if (!requireNamespace("tictoc", quietly = TRUE))
    install.packages('tictoc')
if (!requireNamespace("AnnotationDbi", quietly = TRUE))
    install.packages('AnnotationDbi')
if (!requireNamespace("DT", quietly = TRUE))
    install.packages('DT')
if (!requireNamespace("EnhancedVolcano", quietly = TRUE))
    BiocManager::install('EnhancedVolcano')

```

### Loading

``` {r}
suppressPackageStartupMessages({
  library(tidyverse)
  library(Seurat)
  library(colorBlindness)
  library(RColorBrewer)
  library(presto)
  library(DESeq2)
  library(org.Hs.eg.db)
  library(Matrix)
  library(tictoc)
  library(AnnotationDbi)
  library(DT)
  library(dplyr)
  library(EnhancedVolcano)
  })

# Set seed to your favorite number for reproducibility
set.seed(21)
```

## Load Data

### Load Seurat object 
```{r}
srobj <- readRDS('./day-1/data/workshop-data.rds')
genes <- read_csv('./day-1/data/cov_flu_gene_names_table.csv') 
# genes is a gene conversion table to convert ENSG to readable gene symbols
```

``` {r}
# Need to remake seurat object
mtx <- srobj@assays$RNA@data
rownames(mtx) <- genes[match(row.names(mtx), genes$index), ]$feature_name

se <- CreateSeuratObject(counts = mtx, meta.data = srobj@meta.data)

se
```

```{r}
# Set color palette
pal <- paletteMartin
names(pal) <- sort(unique(se$Celltype))
```

## Analysis

### Seurat pre-processing for cluster visualization (UMAP)

```{r, warnings = FALSE}
se <- se %>%
    NormalizeData(verbose = FALSE) %>%
    FindVariableFeatures(
        method = "vst",
        nfeatures = 3000,
        verbose = FALSE) %>%
    ScaleData(verbose = FALSE) %>%
    RunPCA(verbose = FALSE) %>%
    FindNeighbors %>%
    FindClusters(resolution = 0.5) %>%
    RunUMAP(dims = 1:30, verbose = FALSE, n.components=3L)

```

``` {r, warnings = FALSE}
# TD: Reason behind elbow plot
ElbowPlot(se, ndims = 50)
```

``` {r, warnings = FALSE}
# TD: Reason behind DimPlot
DimPlot(
    se,
    group.by = c("Celltype"),
    label = TRUE,
    cols = pal)
```


```{r}
# Modify strings with special characters to avoid complications later

# QQQ: when I do the comma edit last, it only happens on the B cells - why?
# test1 <- se@meta.data %>%
#   mutate(
#     Celltype = case_when(
#       str_detect(Celltype, ", ") ~ str_replace(Celltype, ", ", "_"),
#       str_detect(Celltype, "\\+") ~ str_replace(Celltype, "G\\+", "Gpos"),
#       str_detect(Celltype, "\\-") ~ str_replace(Celltype, "G\\-", "Gneg"),
#       
#       TRUE ~ Celltype
#       )
#   )

se@meta.data <- se@meta.data %>%
  mutate(
    Celltype = str_replace(Celltype, ", ", "_"),
    Celltype = str_replace(Celltype, "G\\-", "Gneg"),
    Celltype = str_replace(Celltype, "G\\+", "Gpos")
  )

```

```{r}
se@meta.data$Celltype
```

### Aggreage Expression function
TD: define this in 3 sentences or less
``` {r}
annot_pseudobulk <- AggregateExpression(
  se, 
  group.by = c('Sample ID','Celltype')
  )$RNA

# Here we separate the dataset into two subsets the team was interested in.
# CD8 vs. CD4 T cells
Idents(se) <- se@meta.data$Celltype
cd8sr <- subset(se, idents = c('CD8_non-EM-like', 'CD8_EM-like'))
cd4sr <- subset(se, idents = c('CD4_EM-like', 'CD4_non-EM-like'))

# Aggregation is the pseudobulking step - 
# where RNAs are summed across cells per celltype per sample. 
cd4_pseudobulk <- AggregateExpression(cd4sr, group.by = 'Sample ID')$RNA
cd8_pseudobulk <- AggregateExpression(cd8sr, group.by = 'Sample ID')$RNA
```


```{r}
# Save intermediate files because they might be useful for something else later.
dir.create('./day-1/pseudobulk_analysis')
dir.create('./day-1/pseudobulk_analysis/data')
```

## Run DESeq2 

### Explanation

```{r}
list.files('./day-1/pseudobulk_analysis/data')
```

```{r}
# Here we run DESeq2, the classic differential expression package.
colnames(cd4_pseudobulk)
# We have to rearrange the data somewhat to get it into the DESeq object. 
# colData is the sample-level metadata
sample_info <- strsplit(colnames(cd4_pseudobulk), " ")

colData <- data.frame(
  sample = colnames(cd4_pseudobulk),
  condition = sapply(sample_info, `[`, 1)
)
DT::datatable(colData)

rownames(colData) <- colnames(cd4_pseudobulk)
```

```{r}
# Note: If you encounter an error here, make sure dplyr is installed/running.
se@meta.data <- se@meta.data %>%
  rename("Sample ID" = "sample")
colData <- colData %>%
  left_join(se@meta.data %>%
              dplyr::select('sample') %>%
              distinct()
) 
DT::datatable(colData)

# Create the DESeq object, where tests can be run. 
## Check out the documentation online for more.
dds <- DESeqDataSetFromMatrix(countData = cd4_pseudobulk,
                                colData = colData,
                                design = ~ condition)
# this runs the test
dds <- DESeq(dds)
dds
# run 'resultsNames(dds_2)' to see "name" options
# current options: "condition_Flu_vs_Normal"  "condition_nCoV_vs_Normal"
# this pulls results from the DESeq object
res <- results(dds)
res

# filtering and rearranging for plotting
restbl <- res %>% 
  data.frame %>% 
  rownames_to_column('gene') %>% 
  filter(pvalue < 0.05)

# save the table!
## Uncomment below to create results folder
# dir.create('./day-1/pseudobulk_analysis/results')
write.csv(
  restbl, 
  file='./day-1/pseudobulk_analysis/results/cd4_annot_pseudobulk_results.csv'
  )
```

## Results

### What does this mean?
```{r}
results(dds, contrast = c("condition", "Flu", "Normal"))
```

### VolcanoPlot instead >> see below
```{r}
# plotMA()
plotMA(res)
```

## CD8

```{r}
# Here we run DESeq2, the classic differential expression package.
colnames(cd8_pseudobulk)
```

```{r}
# We have to rearrange the data somewhat to get it into the DESeq object. 
# colData is the sample-level metadata
sample_info <- strsplit(colnames(cd8_pseudobulk), " ")
# sample_info

colData <- data.frame(
  sample = colnames(cd8_pseudobulk),
  condition = sapply(sample_info, `[`, 1)
)
DT::datatable(colData)

# Ensure unique rownames in colData for DESeqDataSet

rownames(colData) <- colnames(cd8_pseudobulk)

colData <- colData %>%
  left_join(se@meta.data %>%
  dplyr::select(sample) %>%
    distinct()
) %>%
  column_to_rownames(var = 'sample')
DT::datatable(colData)
```

```{r}
# This function creates the DESeq object, where tests can be run. 
# check out the documentation online for more.
dds <- DESeqDataSetFromMatrix(countData = cd8_pseudobulk,
                                colData = colData,
                                design = ~ condition)

# this runs the test
dds <- DESeq(dds)
dds
# run 'resultsNames(dds_2)' to see "name" options
# current options: "condition_Flu_vs_Normal"  "condition_nCoV_vs_Normal"
# this pulls results from the DESeq object
res <- results(dds)
res

# filtering and rearranging for plotting
restbl <- res %>% 
  data.frame %>% 
  rownames_to_column('gene') %>% 
  filter(pvalue < 0.05)

# save the table!
write.csv(
  restbl,
  file='./day-1/pseudobulk_analysis/results/cd8_annot_pseudobulk_results.csv')
```


```{r}
res <- res %>% 
  data.frame %>% 
  rownames_to_column('gene') %>% 
  filter(pvalue < 0.05) %>% 
  dim
```

```{r}
# We have to rearrange the data somewhat to get it into the DESeq object. colData is the sample-level metadata

# Celltype variable is in question
sample_info <- strsplit(colnames(annot_pseudobulk), "_")

# Prep variables
lvls <- c("Normal", "Flu", "nCoV")
ftr <- str_split(colnames(annot_pseudobulk), pattern = " ", simplify = TRUE)

colData <- data.frame(
  sample = colnames(annot_pseudobulk),
  condition = factor(ftr[, 1], levels = lvls),
  donor_id = sapply(sample_info, `[`, 1),
  CT = sapply(sample_info, `[`, 2)
)

# Ensure unique rownames in colData for DESeqDataSet
rownames(colData) <- colnames(annot_pseudobulk)

colData <- colData %>%
  left_join(se@meta.data %>%
  dplyr::select(sample) %>%
    distinct()
) %>%
  column_to_rownames(var = 'sample')
```

```{r}
# dir.create('pseudobulk_analysis/results')

# I made a 4 loop to do all this for each higher-res celltype separately. 
# colData
lapply(unique(colData$CT), function(cluster) {
  print(cluster)
  # str_detect(string = colnames(annot_pseudobulk), pattern = cluster)
  # bulk_subset <- annot_pseudobulk[, str_detect(string = colnames(annot_pseudobulk), pattern = cluster)]
  split <- str_split_fixed(colnames(annot_pseudobulk),pattern='_',n=2)[,2]
  bulk_subset <- annot_pseudobulk[,split %in% cluster ]
  data_subset <- colData %>% filter(CT %in% cluster) 
  dds <- DESeqDataSetFromMatrix(countData = bulk_subset,
                                colData = data_subset,
                                design = ~ condition)
  
  cluster <- stringr::str_replace(cluster, " ", "_")
  c <- stringr::str_replace(cluster, "\\-", "_")
  dds <- DESeq(dds)
  res <- results(dds)
  restbl <- res %>% 
    data.frame %>% 
    rownames_to_column('gene') %>% 
    filter(pvalue < 0.05)
  r <- str_replace_all(c, '/', '.')
  write_csv(
    restbl,
    glue::glue("./day-1/pseudobulk_analysis/results/{r}_annot_pseudobulk_results.csv"))
})
```

## Still copying Kyle
``` {r}
list.files('./day-1/pseudobulk_analysis/results')
```


``` {r}
res_df <- read_csv('./day-1/pseudobulk_analysis/results/cd4_annotation_pseudobulk_results.csv')

res_df %>% head
```


``` {r}
# Volcano plot is often the ultimate goal of differential expression analysis. This can be the end of the notebook.
# If you have other ideas for further analysis feel free to add. And if you want to write a function to make these per result
# rather than manually doing for loops that would also be great! 
library(EnhancedVolcano)
# options(repr.plot.width=14,repr.plot.height=10)
EnhancedVolcano(res_df,
                lab = res_df$gene,
                x = 'log2FoldChange',
                y = 'padj',
                xlim = c(-8, 8),
                ylim = c(0, 5),
                title = 'Volcano Plot: CD4 T cells',
                subtitle = '                                                   <------------- NoRx   .   Rx ------------->',
                xlab = 'Log2 Fold Change',
                ylab = '-log10 FDR',
                pCutoff = 0.05,
                FCcutoff = 1.5,
                pointSize = c(ifelse(res_df$padj < 0.05 & abs(res_df$log2FoldChange) > 1.5, 1.5, 1)),
                labSize = 4.0,
                col = c('grey30', 'forestgreen', 'royalblue', 'red2'),
                colAlpha = 1,
                legendLabels=c('Not Significant', 'Log2FC', 'P-Value', 'Log2FC & P-Value'),
                legendPosition = 'right',
                legendLabSize = 14,
                drawConnectors = TRUE,
                widthConnectors = 0.5,
                colConnectors = 'grey30')

```


``` {r}


```


``` {r}


```


``` {r}


```


``` {r}


```


``` {r}


```


``` {r}


```


``` {r}


```


``` {r}


```


``` {r}


```
Suggestions:
<!-- # TD: -->
<!-- # after commas, add a space -->
<!-- # make sure code doesn't pass this line >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> -->

The `echo: false` option disables the printing of code (only output is displayed).
