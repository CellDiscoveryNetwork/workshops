---
title: "4 - Pseudobulk Analysis"
author: "CDN team"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format:
  html:
    toc: true
    toc_float: true
    toc-location: left
    toc-depth: 4
    html-math-method: katex
    self-contained-math: true
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

## Introduction

### Install Packages and Libraries

```{r}
# BiocManager::install("DESeq2")
# BiocManager::install("org.Hs.eg.db")
```

```{r}
suppressPackageStartupMessages({suppressWarnings({
library(Seurat)
library(tidyverse)
library(DESeq2)
library(Matrix)
library(tictoc)
library(colorBlindness)
library(RColorBrewer)
library(AnnotationDbi)
library(org.Hs.eg.db)
    })
                                })
```

```{r}
srobj <- readRDS('/Users/kylekimler/Downloads/d8e35450-de43-451a-9979-276eac688bce.rds')
genes <- read_csv('/Users/kylekimler/CDN/workshops/workshop1/data/cov_flu_gene_names_table.csv') # Load a provided gene conversion table to convert ENSG to readable gene symbols

# Need to remake seurat object
mtx <- srobj@assays$RNA@data
rownames(mtx) <- genes[match(row.names(mtx),genes$index),]$feature_name

srobj <- CreateSeuratObject(counts = mtx, meta.data = srobj@meta.data)

srobj
```

```{r}
# Set color palette
pal <- paletteMartin
names(pal) <- sort(unique(srobj$Celltype))
```

## Analysis

### Set gene symbols

```{r}
### Quick processing

srobj <- srobj %>%
    NormalizeData(verbose = FALSE) %>%
    FindVariableFeatures(
        method = "vst",
        nfeatures = 3000,
        verbose = FALSE) %>%
    ScaleData(verbose = FALSE, features = VariableFeatures(.)) %>%
    RunPCA(verbose = FALSE) %>%
    RunUMAP(dims = 1:30, verbose = FALSE)

ElbowPlot(srobj, ndims = 50)

DimPlot(
    srobj,
    group.by = c("Celltype"),
    label = TRUE,
    cols = pal)
```

```{r}
# Not really sure what's going on here
srobj@meta.data %>%
  dplyr::count(`Sample ID`, `Disease group`)
srobj@meta.data %>%
  dplyr::count(Celltype, cell_type)
```

```{r}
# VT_annotation is the low-resolution annotation

annot_pseudobulk <- AggregateExpression(srobj, group.by = c('Sample ID','Celltype'))$RNA

# tierNident is a higher-res annotation
clust_pseudobulk <- AggregateExpression(srobj, group.by = c('Sample ID','cell_type'))$RNA

# Here we separate the dataset into two other subsets that the team was interested in. - CD8 vs. CD4 T cells
Idents(srobj) <- srobj@meta.data$Celltype
cd8sr <- subset(srobj, idents = c('CD8, non-EM-like','CD8, EM-like'))
cd4sr <- subset(srobj, idents = c('CD4, EM-like','CD4, non-EM-like'))

# Aggregation is the pseudobulking step, where RNAs are summed across cells per celltype per sample. 
cd4_pseudobulk <- AggregateExpression(cd4sr,group.by='Sample ID')$RNA
cd8_pseudobulk <- AggregateExpression(cd8sr,group.by='Sample ID')$RNA
```

```{r}
row.names(annot_pseudobulk)[annot_pseudobulk %>% row.names %>% grep('CD8',.)]
```

```{r}
dim(annot_pseudobulk)
```

```{r}
# I like to save intermediate files because they might be useful for something else later.

dir.create('./day-1/pseudobulk_analysis')
dir.create('./day-1/pseudobulk_analysis/data')

# saveRDS(annot_pseudobulk,'./day-1/pseudobulk_analysis/data/annotation_pseudo_bulk_data.rds')
# saveRDS(clust_pseudobulk,'./day-1/pseudobulk_analysis/data/cluster_pseudo_bulk_data.rds')
# saveRDS(cd4_pseudobulk,'./day-1/pseudobulk_analysis/data/cd4_pseudo_bulk_data.rds')
# saveRDS(cd8_pseudobulk,'./day-1/pseudobulk_analysis/data/cd8_pseudo_bulk_data.rds')
```

## Run DESeq2 !!!

```{r}
list.files('./day-1/pseudobulk_analysis/data')
```

```{r}
# Here we run DESeq2, the classic differential expression package.
colnames(cd4_pseudobulk)
# We have to rearrange the data somewhat to get it into the DESeq object. colData is the sample-level metadata
sample_info <- strsplit(colnames(cd4_pseudobulk), " ")
# sample_info

colData <- data.frame(
  sample = colnames(cd4_pseudobulk),
  condition = sapply(sample_info, `[`, 1)
)
colData %>% head
# Ensure unique rownames in colData for DESeqDataSet
# TD: make new object with reg names, not factors
# TD: go through a tutorial bc oh my
rownames(colData) <- colnames(cd4_pseudobulk)
# rownames(colData)
```

```{r}
library(dplyr)
srobj@meta.data <- srobj@meta.data %>%
  rename("Sample ID" = "sample")
colData <- colData %>%
  left_join(srobj@meta.data %>%
              dplyr::select('sample') %>%
              distinct()
) 
colData %>% head

cd4_pseudobulk@x <- as.numeric(as.integer(cd4_pseudobulk@x))

# This function creates the DESeq object, where tests can be run. check out the documentation online for more.
dds <- DESeqDataSetFromMatrix(countData = cd4_pseudobulk,
                                colData = colData,
                                design = ~ condition)
# saveRDS(dds,paste('./day-1/pseudobulk_analysis/data/cd4_annotation_pseudobulk_deseq2_object.rds'))

# this runs the test
dds <- DESeq(dds)
dds
# run 'resultsNames(dds_2)' to see "name" options
# current options: "condition_Flu_vs_Normal"  "condition_nCoV_vs_Normal"
# this pulls results from the DESeq object
res <- results(dds)
res

# filtering and rearranging for plotting
restbl <- res %>% data.frame %>% rownames_to_column('gene') %>% filter(pvalue < 0.05)

# save the table!
# write.csv(restbl,file='./day-1/pseudobulk_analysis/results/cd4_annotation_pseudobulk_results.csv')
```

```{r}
### DO THESE BEFORE RUNNING DESEQ()  - optional - this is from a tutorial
# remove rows with less than 10 reads across all of the samples
# keep <- rowSums(counts(dds)) >= 10
# 
# dds_1 <- dds[keep,]
# dds_1
# dds_1$condition <- relevel(dds_1$condition, ref = "Normal")
```

```{r}
# dds_2 <- DESeq(dds_1)
# res <- results(dds_2)
# res
```

```{r}
res01 <- results(dds, alpha = "0.01")
summary(res01)
```

```{r}
results(dds, contrast = c("condition", "Flu", "Normal"))
```

```{r}
# plotMA()
plotMA(res01)
```

## CD8

```{r}
# Here we run DESeq2, the classic differential expression package.
colnames(cd8_pseudobulk)
```

```{r}
# We have to rearrange the data somewhat to get it into the DESeq object. colData is the sample-level metadata
sample_info <- strsplit(colnames(cd8_pseudobulk), " ")
# sample_info

colData <- data.frame(
  sample = colnames(cd8_pseudobulk),
  condition = sapply(sample_info, `[`, 1)
)
# colData
# Ensure unique rownames in colData for DESeqDataSet

rownames(colData) <- colnames(cd8_pseudobulk)

colData <- colData %>%
  left_join(srobj@meta.data %>%
  dplyr::select(sample) %>%
    distinct()
) %>%
  column_to_rownames(var = 'sample')
colData %>% head
```

```{r}
cd8_pseudobulk@x <- as.numeric(as.integer(cd8_pseudobulk@x))
# This function creates the DESeq object, where tests can be run. check out the documentation online for more.
dds <- DESeqDataSetFromMatrix(countData = cd8_pseudobulk,
                                colData = colData,
                                design = ~ condition)
# saveRDS(dds,paste('./day-1/pseudobulk_analysis/data/cd8_annotation_pseudobulk_deseq2_object.rds'))

# this runs the test
dds <- DESeq(dds)
dds
# run 'resultsNames(dds_2)' to see "name" options
# current options: "condition_Flu_vs_Normal"  "condition_nCoV_vs_Normal"
# this pulls results from the DESeq object
res <- results(dds)
res

# filtering and rearranging for plotting
restbl <- res %>% data.frame %>% rownames_to_column('gene') %>% filter(pvalue < 0.05)

# save the table!
# write.csv(restbl,file='./day-1/pseudobulk_analysis/results/cd8_annotation_pseudobulk_results.csv')
```

```{r}
# We have to rearrange the data somewhat to get it into the DESeq object. colData is the sample-level metadata
sample_info <- strsplit(colnames(annot_pseudobulk), " ")
# sample_info

colData <- data.frame(
  sample = colnames(annot_pseudobulk),
  condition = sapply(sample_info, `[`, 1)
)

# Ensure unique rownames in colData for DESeqDataSet
rownames(colData) <- colnames(annot_pseudobulk)
# rownames(colData)

colData <- colData %>%
  left_join(srobj@meta.data %>%
  dplyr::select(sample) %>%
    distinct()
) %>%
  column_to_rownames(var = 'sample')
colData %>% head
```

```{r}
res <- res %>% data.frame %>% rownames_to_column('gene') %>% filter(pvalue < 0.05) %>% dim
```

```{r}
# dir.create('pseudobulk_analysis/results')

# I made a 4 loop to do all this for each higher-res celltype separately. 
# colData
for (cluster in unique(colData$Celltype)) {
  cluster
    # bulk_subset <- annot_pseudobulk[,str_split_fixed(colnames(annot_pseudobulk),pattern='_',n=2)[,2] %in% cluster ]
    # data_subset <- colData %>% filter(VT_annotation24 %in% cluster)
    # dds <- DESeqDataSetFromMatrix(countData = bulk_subset,
    #                             colData = data_subset,
    #                             design = ~ cohort)
    # saveRDS(dds,paste0('pseudobulk_analysis/data/',
    #                    cluster %>% str_replace_all('/','.'),
    #                    '_annotation_pseudobulk_deseq2_object.rds'))
    # dds <- DESeq(dds)
    # res <- results(dds,name='cohort_Rx_vs_NoRx')
    # restbl <- res %>% data.frame %>% rownames_to_column('gene') %>% filter(pvalue < 0.05)
    # write_csv(restbl,paste0('pseudobulk_analysis/results/',
    #                         cluster %>% str_replace_all('/','.'),
    #                         '_annotation_pseudobulk_results.csv'))
}
```

# The `echo: false` option disables the printing of code (only output is displayed).
