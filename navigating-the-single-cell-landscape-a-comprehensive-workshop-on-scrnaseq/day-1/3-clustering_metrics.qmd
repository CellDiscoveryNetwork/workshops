---
title: "1 - Cellxgene Census"
author: "CDN team"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format:
  html:
    toc: true
    toc_float: true
    toc-location: left
    toc-depth: 4
    html-math-method: katex
    self-contained-math: true
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

## Libraries
Installation
```{r}
install.packages('plotly')
devtools::install_github('jo-m-lab/ARBOL') # ARBOL is used to plot clusters.
devtools::install_github('immunogenomics/presto') # presto is used to speed up Wilcoxon tests for marker gene calculation in Seurat
```

```{r}
library(Seurat)
library(tidyverse)
library(ARBOL)
library(plotly) %>% suppressPackageStartupMessages
```

## Load data
```{r, include=FALSE}
srobj <- readRDS('/Users/kylekimler/Downloads/d8e35450-de43-451a-9979-276eac688bce.rds')
genes <- read_csv('/Users/kylekimler/CDN/workshops/workshop1/data/cov_flu_gene_names_table.csv')
row.names(srobj) <- genes$feature_name
row.names(srobj) <- genes$feature_name
srobj@meta.data %>% head
srobj
Features(srobj)
```

```{r, execute=FALSE}
srobj <- readRDS('/path/to/downloaded/dataset/d8e35450-de43-451a-9979-276eac688bce.rds')
srobj@meta.data %>% colnames
srobj
```

## Viewing clusters
Typically in scRNA analysis, clusters are viewed by coloring cells on a dimension-reduced latent space of gene expression, like a tSNE or a UMAP. 
In the dataset we've downloaded, we have a tSNE already calculated, so let's display the authors' celltypes there first. 

By plotting many tSNE's per sample or per group, we can start to understand how clusters behave across samples.
```{r,fig.width=8,fig.height=5}
DimPlot(srobj, 
        reduction='tsne', 
        group.by='cell_type')
```
```{r, fig.width=16,fig.height=20}
DimPlot(srobj, 
        reduction='tsne', 
        group.by='cell_type', 
        split.by='Sample ID',
        ncol=4)
```
For example, we can see the sample from flu patient 5 is dominated by erythrocytes, and these erythrocytes aren't reliably found across samples, whether diseased or normal. But that doesn't tell us much about the clusters themselves. 

And these celltypes are often validated by plotting heatmaps, dotplots, or violin plots of genes that are most important to each cluster, found by 1 v all differential expression.
```{r}
Idents(srobj) <- srobj@meta.data$cell_type
celltype_markers <- FindAllMarkers(srobj, 
                        only.pos=TRUE, 
                        logfc.threshold=0.25,
                        min.diff.pct=0.05,
                        )

celltype_markers %>% group_by(cluster) %>% filter(p_val_adj==0) %>%
slice_max(avg_log2FC,n=10)
```

And there are quite a few methods for displaying genes across clusters detailed in [Seurat vignettes](https://satijalab.org/seurat/articles/visualization_vignette)

## Beyond the norm

As we can see, the cell types are somewhat well defined but as usual there are some fuzzy boundaries. Some people like to go 3d to see if these boundaries are resolved.

```{r}
emb <- Seurat::Embeddings(srobj,reduction='tsne')
emb %>% head
emb <- emb %>% as.data.frame %>% rownames_to_column('CellID') %>% 
left_join(srobj@meta.data %>% rownames_to_column("CellID"))

suppressMessages({
p <- plot_ly(emb, type='scatter3d', color = ~severity, 
             x = ~tSNE_1, y = ~tSNE_2, z = ~tSNE_3)
p
    })
```    

But even with 3d we don't have a way to quantify how useful our clusters are as labels in our dataset. Firstly, with a UMAP or tSNE, we can't see how well represented samples are across clusters. Some people build cluster-composition bar graphs for this, but these can be difficult to compare. One solution is to use a diversity metric, such as Simpson's diversity, that can be plotted per cluster. 

Simpson's diversity
```{r}

```

Silhouette analysis code
```{r}
siltbl <- pcaRaw$pca %>% mutate(sample2 = paste(sample,Health,sep='~')) %>% column_to_rownames('sample2') %>% select(PC1:PC50)
iDist <- dist(siltbl,method='euclidean')
silres <- silhouette(as.numeric(match(pcaRaw$pca$Health,pcaRaw$pca$Health %>% unique)),iDist)

sil_df <- data.frame(cluster = factor(silres[, "cluster"]),
                     silhouette = silres[, "sil_width"])

sil_df <- sil_df %>% mutate(health = unique(pcaRaw$pca$Health)[cluster])
sil_df$cluster <- with(sil_df, reorder(cluster, silhouette, FUN=mean))

sil_df %>% head

sil_plot <- ggplot(sil_df, aes(x = health, y = silhouette, fill = health, group=health)) +
    geom_bar(stat = "identity") +
    theme_minimal() +
    labs(title = "Silhouette plot",
        x = "Cluster",
        y = "Silhouette width",
        fill = "Cluster") +
    theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
    scale_fill_manual(values = wes_palette("Darjeeling1")[c(2,3,1)])

sil_plot
```

{}
```